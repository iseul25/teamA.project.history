package com.lms.history.boards.controller;

import com.lms.history.boards.entity.Board;
import com.lms.history.boards.service.BoardService;
import com.lms.history.users.entity.User;
import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;

@Controller
@RequestMapping("/board")
public class BoardController {

    private final BoardService boardService;

    public BoardController(BoardService boardService) {
        this.boardService = boardService;
    }

    // 시대 선택 페이지
    @GetMapping("/topic")
    public String boardTopic(HttpSession session, Model model) {
        System.out.println("로그인 사용자: " + session.getAttribute("loginUser"));
        return "board/boardTopic";
    }

    // 게시글 목록 조회
    @GetMapping("/list")
    public String list(@RequestParam(value="boardType", required=false) String boardType,
                       HttpSession session,
                       Model model) {
        System.out.println("로그인 사용자: " + session.getAttribute("loginUser"));

        session.setAttribute("selectedBoardType", boardType);

        List<Board> boards = boardService.findByBoardType(boardType);
        model.addAttribute("boards", boards);
        model.addAttribute("selectedBoardType", boardType);

        return "board/listBoard";
    }

    @GetMapping("/detail")
    public String detail(@RequestParam("boardId") int boardId, HttpSession session, Model model) {

        try {
            User loginUser = (User) session.getAttribute("loginUser");
            Board board = boardService.findById(boardId);
            System.out.println("로그인 사용자: " + session.getAttribute("loginUser"));
            model.addAttribute("board", board);
            return "board/detailBoard";
        } catch (Exception e) {
            // 에러 로그 기록 후 에러 메시지와 함께 리다이렉트
            return "redirect:/board/list?error=database";
        }
    }

    // 게시글 등록 폼
    @GetMapping("/create")
    public String createForm(@RequestParam(value="boardType", required=false) String boardType,
                             HttpSession session, Model model) {

        session.setAttribute("selectedBoardType", boardType);

        if (boardType == null) boardType = "default"; // 기본값 처리

        Board board = new Board();
        board.setBoardType(boardType);
        model.addAttribute("board", board);
        return "board/createBoard";
    }

    // 게시글 등록 처리
    @PostMapping("/create")
    public String create(@ModelAttribute Board board,
                         RedirectAttributes redirectAttributes,
                         Model model,
                         HttpSession session) {

        System.out.println("로그인 사용자: " + session.getAttribute("loginUser"));

        try {
            // 로그인 사용자 확인
            User loginUser = (User) session.getAttribute("loginUser");
            if (loginUser == null) {
                return "redirect:/login";
            }

            // board에 userId 설정
           // board.setUserId(loginUser.getUserId()); // 또는 getId() 메서드

            System.out.println("게시글 생성 시도 - userId: " + board.getUserId());

            boardService.create(board, loginUser.getUserId());

            redirectAttributes.addAttribute("boardType", board.getBoardType());
            return "redirect:/board/list";

        } catch (IllegalArgumentException e) {
            model.addAttribute("errorMessage", e.getMessage());
            model.addAttribute("selectedBoardType", board.getBoardType());
            return "board/createBoard";
        } catch (Exception e) {
            model.addAttribute("errorMessage", "게시글 등록 중 오류가 발생했습니다.");
            model.addAttribute("selectedBoardType", board.getBoardType());
            return "board/createBoard";
        }
    }

    // 게시글 수정 폼
    @GetMapping("/edit")
    public String editForm(@RequestParam("boardId") int boardId, Model model) {
        Board board = boardService.findById(boardId);
        model.addAttribute("board", board);
        model.addAttribute("selectedBoardType", board.getBoardType());
        return "board/editBoard";
    }

    // 게시글 수정 처리
    @PostMapping("/edit")
    public String edit(@ModelAttribute Board board, Model model, RedirectAttributes redirectAttributes) {
        try {
            boardService.update(board);
            redirectAttributes.addAttribute("boardType", board.getBoardType());
            return "redirect:/board/list";
        } catch (IllegalStateException e) {
            model.addAttribute("errorMessage", e.getMessage());
            model.addAttribute("selectedBoardType", board.getBoardType());
            return "board/editBoard"; // 수정 실패 시 수정 폼으로
        }
    }

    // 게시글 삭제 처리
    @PostMapping("/delete")
    public String delete(@RequestParam int boardId, RedirectAttributes redirectAttributes) {
        // 삭제하기 전에 해당 게시글의 boardType을 조회
        Board board = boardService.findById(boardId);
        String boardType = board.getBoardType();

        // 게시글 삭제
        boardService.delete(boardId);

        // boardType을 URL 파라미터로 추가해서 리다이렉트
        redirectAttributes.addAttribute("boardType", boardType);
        return "redirect:/board/list";
    }
}
